异常处理
1、错误处理
    1、默认规则
        ● 默认情况下，Spring Boot提供/error处理所有错误的映射
        ● 对于机器客户端（PostMan），它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“whitelabel”错误视图，以HTML格式呈现相同的数据

2.自定义的异常页面 定制错误处理逻辑
    ● 要对其进行自定义，添加View解析为error
    ● 要完全替换默认行为，可以实现 ErrorController 并注册该类型的Bean定义，或添加ErrorAttributes类型的组件以使用现有机制但替换其内容。
    ● error/下的4xx，5xx页面会被自动解析；可以打印一些错误的堆栈信息(定义为5xx的原因在于，当发生服务器的内部异常时，通过5xx都能匹配到，当发生客户端请求异常匹配4xx)
   ● 自定义错误页
     ○ error/404.html  error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页
   ● @ControllerAdvice+@ExceptionHandler处理全局异常；底层是 ExceptionHandlerExceptionResolver 支持的
   ● @ResponseStatus+自定义异常 ；底层是 ResponseStatusExceptionResolver ，把responsestatus注解的信息底层调用 response.sendError(statusCode, resolvedReason)；tomcat发送的/error
   ● Spring底层的异常，如 参数类型转换异常；DefaultHandlerExceptionResolver 处理框架底层的异常。
     ○ response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage());

     自定义实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则
     ● ErrorViewResolver  实现自定义处理异常；
       ○ response.sendError error请求就会转给controller
       ○ 你的异常没有任何人能处理。tomcat底层 response.sendError。error请求就会转给controller
       ○ basicErrorController 要去的页面地址是 ErrorViewResolver  ；


 异常处理的自动配置原理：
  org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
  ● ErrorMvcAutoConfiguration  自动配置异常处理规则
    ○ 容器中的组件：类型：DefaultErrorAttributes -> id：errorAttributes
      ■ public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver
      ■ DefaultErrorAttributes：定义错误页面中可以包含哪些数据。
    ○ 容器中的组件：类型：BasicErrorController --> id：basicErrorController（json+白页 适配响应，如果是浏览器就响应白页，如果是postman之类的就响应一个JSON数据）
      ■ 处理默认 /error 路径的请求；页面响应 new ModelAndView("error", model)；
      ■ 容器中有组件 View->id是error；（响应默认错误页）
      ■ 容器中放组件 BeanNameViewResolver（视图解析器）；按照返回的视图名作为组件的id去容器中找View对象。最终得到的对象是一个 StaticView

 org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController

    //用来返回错误页面
	@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)
	public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) {
		HttpStatus status = getStatus(request);
		Map<String, Object> model = Collections
				.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));
		response.setStatus(status.value());
		ModelAndView modelAndView = resolveErrorView(request, response, status, model);
		return (modelAndView != null) ? modelAndView : new ModelAndView("error", model);
	}
    //用来返回JSON数据的
	@RequestMapping
	public ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {
		HttpStatus status = getStatus(request);
		if (status == HttpStatus.NO_CONTENT) {
			return new ResponseEntity<>(status);
		}
		Map<String, Object> body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));
		return new ResponseEntity<>(body, status);
	}


    private static class StaticView implements View {

    		private static final MediaType TEXT_HTML_UTF8 = new MediaType("text", "html", StandardCharsets.UTF_8);

    		private static final Log logger = LogFactory.getLog(StaticView.class);

    		@Override
    		public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)
    				throws Exception {
    			if (response.isCommitted()) {
    				String message = getMessage(model);
    				logger.error(message);
    				return;
    			}
    			response.setContentType(TEXT_HTML_UTF8.toString());
    			StringBuilder builder = new StringBuilder();
    			Object timestamp = model.get("timestamp");
    			Object message = model.get("message");
    			Object trace = model.get("trace");
    			if (response.getContentType() == null) {
    				response.setContentType(getContentType());
    			}
    			//就是构造的那个异常的展示页面  Whitelabel Error Page
    			builder.append("<html><body><h1>Whitelabel Error Page</h1>").append(
    					"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>")
    					.append("<div id='created'>").append(timestamp).append("</div>")
    					.append("<div>There was an unexpected error (type=").append(htmlEscape(model.get("error")))
    					.append(", status=").append(htmlEscape(model.get("status"))).append(").</div>");
    			if (message != null) {
    				builder.append("<div>").append(htmlEscape(message)).append("</div>");
    			}
    			if (trace != null) {
    				builder.append("<div style='white-space:pre-wrap;'>").append(htmlEscape(trace)).append("</div>");
    			}
    			builder.append("</body></html>");
    			response.getWriter().append(builder.toString());
    		}

         ○ DefaultErrorAttributes先来处理异常。把异常信息保存到request域，并且返回null；
         ○ 2、默认没有任何人能处理异常，所以异常会被抛出
           ■ 1、如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理
           ■ 2、解析错误视图；遍历所有的  ErrorViewResolver  看谁能解析。

org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController
    DefaultErrorViewResolver的作用是：

        public class DefaultErrorViewResolver implements ErrorViewResolver, Ordered {
        	private static final Map<Series, String> SERIES_VIEWS;
        	static {
        		Map<Series, String> views = new EnumMap<>(Series.class);
        		views.put(Series.CLIENT_ERROR, "4xx");
        		views.put(Series.SERVER_ERROR, "5xx");
        		SERIES_VIEWS = Collections.unmodifiableMap(views);
        	}
        	private ApplicationContext applicationContext;
        	private final ResourceProperties resourceProperties;
        	private final TemplateAvailabilityProviders templateAvailabilityProviders;
        	private int order = Ordered.LOWEST_PRECEDENCE;
        	/**
        	 * Create a new {@link DefaultErrorViewResolver} instance.
        	 * @param applicationContext the source application context
        	 * @param resourceProperties resource properties
        	 */
        	public DefaultErrorViewResolver(ApplicationContext applicationContext, ResourceProperties resourceProperties) {
        		Assert.notNull(applicationContext, "ApplicationContext must not be null");
        		Assert.notNull(resourceProperties, "ResourceProperties must not be null");
        		this.applicationContext = applicationContext;
        		this.resourceProperties = resourceProperties;
        		this.templateAvailabilityProviders = new TemplateAvailabilityProviders(applicationContext);
        	}

        	DefaultErrorViewResolver(ApplicationContext applicationContext, ResourceProperties resourceProperties,
        			TemplateAvailabilityProviders templateAvailabilityProviders) {
        		Assert.notNull(applicationContext, "ApplicationContext must not be null");
        		Assert.notNull(resourceProperties, "ResourceProperties must not be null");
        		this.applicationContext = applicationContext;
        		this.resourceProperties = resourceProperties;
        		this.templateAvailabilityProviders = templateAvailabilityProviders;
        	}
            //解析得到要跳转的视图页面
        	@Override
        	public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map<String, Object> model) {
        		ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);
        		if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {
        		    //得到要跳转的页面
        			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);
        		}
        		return modelAndView;
        	}

        	private ModelAndView resolve(String viewName, Map<String, Object> model) {
        	    //  viewName 就是http请求的状态码  这就是为什么要把错误的页面放到error下
        		String errorViewName = "error/" + viewName;
        		TemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName,
        				this.applicationContext);
        		if (provider != null) {
        			return new ModelAndView(errorViewName, model);
        		}
        		return resolveResource(errorViewName, model);
        	}

        	private ModelAndView resolveResource(String viewName, Map<String, Object> model) {
        		for (String location : this.resourceProperties.getStaticLocations()) {
        			try {
        				Resource resource = this.applicationContext.getResource(location);
        				resource = resource.createRelative(viewName + ".html");
        				if (resource.exists()) {
        					return new ModelAndView(new HtmlResourceView(resource), model);
        				}
        			}
        			catch (Exception ex) {
        			}
        		}
        		return null;
        	}

   分析 DefaultErrorAttributes的作用：
        @Bean
     	@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)
     	public DefaultErrorAttributes errorAttributes() {
     		return new DefaultErrorAttributes();
     	}

     	定义了异常可以返回的字段信息
     	public Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {
                Map<String, Object> errorAttributes = this.getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));
                if (Boolean.TRUE.equals(this.includeException)) {
                    options = options.including(new Include[]{Include.EXCEPTION});
                }

                if (!options.isIncluded(Include.EXCEPTION)) {
                    errorAttributes.remove("exception");
                }
                //堆栈信息
                if (!options.isIncluded(Include.STACK_TRACE)) {
                    errorAttributes.remove("trace");
                }
                //message
                if (!options.isIncluded(Include.MESSAGE) && errorAttributes.get("message") != null) {
                    errorAttributes.put("message", "");
                }

                if (!options.isIncluded(Include.BINDING_ERRORS)) {
                    errorAttributes.remove("errors");
                }

                return errorAttributes;
            }


异常处理的流程：
1、执行目标方法，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束；并且用 dispatchException封装
2、进入视图解析流程（页面渲染？）
processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
3、mv = processHandlerException；处理handler发生的异常，处理完成返回ModelAndView；
● 1、遍历所有的 handlerExceptionResolvers，看谁能处理当前异常【HandlerExceptionResolver处理器异常解析器】 HandlerExceptionResolver是一个接口
  public interface HandlerExceptionResolver {@Nullable
                                             	ModelAndView resolveException(
                                             	        //参数解释 Object handler 发生异常的处理器类型 也就是可以获取到具体发生异常的方法 方法返回一个ModelAndView
                                             			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex);

                                             }

  ○ 1、DefaultErrorAttributes先来处理异常。把异常信息保存到request域(方便下次请求携带异常信息)，并且返回null；

  ○ 2、默认没有任何人能处理异常，所以异常会被抛出
    ■ 1、如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理
      org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController
          @RequestMapping(
                 produces = {"text/html"}
             )
             public ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) {
                 HttpStatus status = this.getStatus(request);
                 Map<String, Object> model = Collections.unmodifiableMap(this.getErrorAttributes(request, this.getErrorAttributeOptions(request, MediaType.TEXT_HTML)));
                 response.setStatus(status.value());
                 ModelAndView modelAndView = this.resolveErrorView(request, response, status, model);
                 return modelAndView != null ? modelAndView : new ModelAndView("error", model);
             }
    ■ 2、解析错误视图；遍历所有的  ErrorViewResolver  看谁能解析。
            protected ModelAndView resolveErrorView(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map<String, Object> model) {
                    Iterator var5 = this.errorViewResolvers.iterator();

                    ModelAndView modelAndView;
                    do {
                        if (!var5.hasNext()) {
                            return null;
                        }
                        // 遍历所有的  ErrorViewResolver  看谁能解析
                        ErrorViewResolver resolver = (ErrorViewResolver)var5.next();
                        modelAndView = resolver.resolveErrorView(request, status, model);
                    } while(modelAndView == null);

                    return modelAndView;
                }
    ■ 3、默认的ErrorViewResolver只有一个 DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html
         public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map<String, Object> model) {
                 //String.valueOf(status.value()) 请求的状态码被转换成为一个字符串 作为ViewName
                 ModelAndView modelAndView = this.resolve(String.valueOf(status.value()), model);
                 if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {
                     modelAndView = this.resolve((String)SERIES_VIEWS.get(status.series()), model);
                 }

                 return modelAndView;
             }
    ■ 4、模板引擎最终响应这个页面 error/500.html
        private ModelAndView resolve(String viewName, Map<String, Object> model) {
                String errorViewName = "error/" + viewName;
                TemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName, this.applicationContext);
                return provider != null ? new ModelAndView(errorViewName, model) : this.resolveResource(errorViewName, model);
            }

     结合doDispatch()方法来看:
     protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {
     		HttpServletRequest processedRequest = request;
     		HandlerExecutionChain mappedHandler = null;
     		boolean multipartRequestParsed = false;

     		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);

     		try {
     			ModelAndView mv = null;
     			Exception dispatchException = null;

     			try {
     				processedRequest = checkMultipart(request);
     				multipartRequestParsed = (processedRequest != request);

     				// Determine handler for the current request.
     				mappedHandler = getHandler(processedRequest);
     				if (mappedHandler == null) {
     					noHandlerFound(processedRequest, response);
     					return;
     				}

     				// Determine handler adapter for the current request.
     				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());

     				// Process last-modified header, if supported by the handler.
     				String method = request.getMethod();
     				boolean isGet = "GET".equals(method);
     				if (isGet || "HEAD".equals(method)) {
     					long lastModified = ha.getLastModified(request, mappedHandler.getHandler());
     					if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {
     						return;
     					}
     				}

     				if (!mappedHandler.applyPreHandle(processedRequest, response)) {
     					return;
     				}

     				// Actually invoke the handler. 执行目标方法
     				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());

     				if (asyncManager.isConcurrentHandlingStarted()) {
     					return;
     				}

     				applyDefaultViewName(processedRequest, mv);
     				mappedHandler.applyPostHandle(processedRequest, response, mv);
     			}
     			//当目标方法发生任何运行时异常都会被捕捉 并且被封装为一个dispatchException
     			catch (Exception ex) {
     				dispatchException = ex;
     			}
     			catch (Throwable err) {
     				// As of 4.3, we're processing Errors thrown from handler methods as well,
     				// making them available for @ExceptionHandler methods and other scenarios.
     				dispatchException = new NestedServletException("Handler dispatch failed", err);
     			}
     			//视图解析流程 页面渲染？mappedHandler处理器 mv真确执行了才会有值
     			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
     		}
     		catch (Exception ex) {
     			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);
     		}
     		catch (Throwable err) {
     			triggerAfterCompletion(processedRequest, response, mappedHandler,
     					new NestedServletException("Handler processing failed", err));
     		}
     		finally {
     			if (asyncManager.isConcurrentHandlingStarted()) {
     				// Instead of postHandle and afterCompletion
     				if (mappedHandler != null) {
     					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);
     				}
     			}
     			else {
     				// Clean up any resources used by a multipart request.
     				if (multipartRequestParsed) {
     					cleanupMultipart(processedRequest);
     				}
     			}
     		}
     	}

        private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,
        			@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,
        			@Nullable Exception exception) throws Exception {

        		boolean errorView = false;
                //如果发生异常此时的值就不为空
        		if (exception != null) {
        			if (exception instanceof ModelAndViewDefiningException) {
        				logger.debug("ModelAndViewDefiningException encountered", exception);
        				mv = ((ModelAndViewDefiningException) exception).getModelAndView();
        			}
        			else {
        				Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);
        				//处理handler的异常 处理完仍然返回一个ModelAndView
        				mv = processHandlerException(request, response, handler, exception);
        				errorView = (mv != null);
        			}
        		}

        		// Did the handler return a view to render?
        		if (mv != null && !mv.wasCleared()) {
        			render(mv, request, response);
        			if (errorView) {
        				WebUtils.clearErrorRequestAttributes(request);
        			}
        		}
        		else {
        			if (logger.isTraceEnabled()) {
        				logger.trace("No view rendering, null ModelAndView returned.");
        			}
        		}

        		if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {
        			// Concurrent handling started during a forward
        			return;
        		}

        		if (mappedHandler != null) {
        			// Exception (if any) is already handled..
        			mappedHandler.triggerAfterCompletion(request, response, null);
        		}
        	}

        	@Nullable
            	protected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,
            			@Nullable Object handler, Exception ex) throws Exception {

            		// Success and error responses may use different content types
            		request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);

            		// Check registered HandlerExceptionResolvers...
            		ModelAndView exMv = null;
            		//遍历所有的handlerExceptionResolver，谁能处理当前异常
            		if (this.handlerExceptionResolvers != null) {
            			for (HandlerExceptionResolver resolver : this.handlerExceptionResolvers) {
            				exMv = resolver.resolveException(request, response, handler, ex);
            				if (exMv != null) {
            					break;
            				}
            			}
            		}
            		if (exMv != null) {
            			if (exMv.isEmpty()) {
            				request.setAttribute(EXCEPTION_ATTRIBUTE, ex);
            				return null;
            			}
            			// We might still need view name translation for a plain error model...
            			if (!exMv.hasView()) {
            				String defaultViewName = getDefaultViewName(request);
            				if (defaultViewName != null) {
            					exMv.setViewName(defaultViewName);
            				}
            			}
            			if (logger.isTraceEnabled()) {
            				logger.trace("Using resolved error view: " + exMv, ex);
            			}
            			else if (logger.isDebugEnabled()) {
            				logger.debug("Using resolved error view: " + exMv);
            			}
            			WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());
            			return exMv;
            		}

            		throw ex;
            	}