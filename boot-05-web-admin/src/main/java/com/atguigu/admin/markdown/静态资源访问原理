只要静态资源放在类路径下： called /static (or /public or /resources or /META-INF/resources
访问 ： 当前项目根路径/ + 静态资源名



原理： 静态映射/**。
请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面

改变默认的静态资源路径,  主要作用是过滤器过滤动态资源时，防止将静态资源也过滤掉
spring:
  mvc:
    static-path-pattern: /res/**   //增加静态资源访问前缀

  resources:
      static-locations: [classpath:/haha/]  //修改静态资源的访问根文件夹


实例 比如我在 application.properties文件夹中配置了 spring.mvc.static-path-pattern=/res/**
那么访问静态资源就必须通过 http://localhost:8888/res/1624114130678.jpg访问

webjars静态资源
自动映射 /webjars/**
https://www.webjars.org/

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>3.5.1</version>
        </dependency>
访问地址：http://localhost:8888/webjars/jquery/3.5.1/jquery.js   后面地址要按照依赖里面的包路径

欢迎页支持
● 静态资源路径下  index.html   通过http://localhost:8888/即可访问到该 welcome page
  ○ 可以配置静态资源路径
  ○ 但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问
  spring:
  #  mvc:
  #    static-path-pattern: /res/**   这个会导致welcome page功能失效

    resources:
      static-locations: [classpath:/haha/]

  自定义 Favicon
  favicon.ico 放在静态资源目录下即可。
  spring:
  #  mvc:
  #    static-path-pattern: /res/**   这个会导致 Favicon 功能失效

  静态资源的配置原理  org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
  ● SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）
  ● SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效

      @Configuration(proxyBeanMethods = false)
      @ConditionalOnWebApplication(type = Type.SERVLET)
      @ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })
      //为了全面定制化配置SpringMVC 当包含WebMvcConfigurationSupport.class 时下面的配置类全部不生效
      @ConditionalOnMissingBean(WebMvcConfigurationSupport.class)
      @AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)
      @AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,
            ValidationAutoConfiguration.class })
      public class WebMvcAutoConfiguration {}

       给容器中配了什么？

        //SpringMVC为了兼容restful风格的请求 可以提交put或者delete类型的请求
        @Bean
      	@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)
      	@ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = false)
      	public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {
      		return new OrderedHiddenHttpMethodFilter();
      	}
        //表单类容的过滤器
      	@Bean
      	@ConditionalOnMissingBean(FormContentFilter.class)
      	@ConditionalOnProperty(prefix = "spring.mvc.formcontent.filter", name = "enabled", matchIfMissing = true)
      	public OrderedFormContentFilter formContentFilter() {
      		return new OrderedFormContentFilter();
      	}

        @Configuration(proxyBeanMethods = false)
        @Import(EnableWebMvcConfiguration.class)
        @EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })
        @Order(0)
        public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer {

配置文件的相关属性和xxx进行了绑定。WebMvcProperties==spring.mvc、ResourceProperties==spring.resources


   如果配置类只有一个有参构造器，有参构造器所有参数的值都会从容器中确定

   //ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象
   //WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象
   //ListableBeanFactory beanFactory Spring的beanFactory
   //HttpMessageConverters 找到所有的HttpMessageConverters
   //ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========
   //DispatcherServletPath
   //ServletRegistrationBean   给应用注册Servlet、Filter....
   	public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,
   				ListableBeanFactory beanFactory, ObjectProvider<HttpMessageConverters> messageConvertersProvider,
   				ObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider,
   				ObjectProvider<DispatcherServletPath> dispatcherServletPath,
   				ObjectProvider<ServletRegistrationBean<?>> servletRegistrations) {
   			this.resourceProperties = resourceProperties;
   			this.mvcProperties = mvcProperties;
   			this.beanFactory = beanFactory;
   			this.messageConvertersProvider = messageConvertersProvider;
   			this.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();
   			this.dispatcherServletPath = dispatcherServletPath;
   			this.servletRegistrations = servletRegistrations;
   		}

    //增加资源管理配置
    @Override
    		public void addResourceHandlers(ResourceHandlerRegistry registry) {
    		    // 可以发通过 spring.resources前缀还可以配置一个 add-mappings 将这个属性配置为 false则if条件外的所有配置将不生效，即静态资源无法访问
    			if (!this.resourceProperties.isAddMappings()) {
    				logger.debug("Default resource handling disabled");
    				return;
    			}
    			//静态资源 以spring.resources前缀的配置 还可以配置缓存  例如配置 spring.resources.cache.period=1100
    			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();
    			CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();
    			//当匹配到/webjars/**这个路径时所有的资源都是从 /META-INF/resources/webjars/ 下面找
    			if (!registry.hasMappingForPattern("/webjars/**")) {
    				customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**")
    				        //
    						.addResourceLocations("classpath:/META-INF/resources/webjars/")
    						//设置浏览器缓存静态资源 缓存的时间为上面设置的 cachePeriod
    						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));
    			}
    			//静态资源路径 从mvcProperties中获取用户的配置信息 如果用户没有配置则为 /**
    			String staticPathPattern = this.mvcProperties.getStaticPathPattern();
    			if (!registry.hasMappingForPattern(staticPathPattern)) {
    				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)
    				// 其中resourceProperties.getStaticLocations()就指定了静态资源存放的四个位置  如果用户通过配置修改了则按照用户的来
    						.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))
    						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));
    			}
    		}

    		//欢迎页的处理规则 HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。
    		@Bean
            public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,
                    FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {
                WelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(
                        new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),
                        //相当于配置文件中配置的 spring.mvc.static-path-pattern=/res/**
                        this.mvcProperties.getStaticPathPattern());
                welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));
                welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());
                return welcomePageHandlerMapping;
            }
            org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping

            WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,
            			ApplicationContext applicationContext, Optional<Resource> welcomePage, String staticPathPattern) {
            		//要用欢迎页功能，必须是 /**
            		if (welcomePage.isPresent() && "/**".equals(staticPathPattern)) {
            			logger.info("Adding welcome page: " + welcomePage.get());
            			setRootViewName("forward:index.html");
            		}
            		//调用controller的 /index
            		else if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {
            			logger.info("Adding welcome page template: index");
            			setRootViewName("index");
            		}
            	}

